/ headers [Array of Symbols or Strings]
/ data [Array of Hash or Object]

== stylesheet_include('blocks/table')

- data = [data] unless data.is_a?(Array)

- unless locals[:headers] && headers
  - headers = case data.first
  - when Hash
    - data.first.keys
  - when BlockStack::Model
    - unless headers = data.first.config.table_columns
      - assoc = data.first.associations.map(&:method_name)
      - headers = data.first._attrs.reject { |k, v| assoc.include?(k) || k != :id && (v[:options][:singleton] || v[:options].include?(:dformed) && !v[:options][:dformed]) }.keys.hmap { |k| [k.to_s.gsub('_', ' ').title_case, k] }
    - headers
  - when BBLib::Effortless
    - data.first._attrs.reject { |k, v| k != :id && (v[:options][:singleton] || v[:options].include?(:dformed) && !v[:options][:dformed]) }.keys.hmap { |k| [k.to_s.gsub('_', ' ').title_case, k] }
  - else
    - { 'ID': :object_id, 'Name': :to_s, 'Class': :class }

table data-page-length="#{page_length}" data-order="[]" *attributes
  thead
    tr
      - headers.each do |header, _method|
        th.ripple data-ripple-color='rgb(215, 215, 215)' = squish(header.to_s, max)
  tbody
    - [data].flatten(1).each do |obj|
      tr
        - headers.each do |header, method|
          - if obj.is_a?(Hash)
            - value = obj[method || header]
          - elsif obj.respond_to?(method || header)
            - value = obj.send(method || header)
          - else
            - value = empty
          - value = display_value(value, method)
          - if method == :id && obj.is_a?(BlockStack::Model)
            - value = link_to(:show, obj, value, class: 'btn btn-outline-primary')
          td == value.to_s
    == yield if block_given?
